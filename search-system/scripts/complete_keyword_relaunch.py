#!/usr/bin/env python3
"""
Script complet pour relancer toutes les recherches avec mots-cl√©s uniques.
Version autonome qui inclut l'extraction ET le relancement des recherches.
"""

import json
import os
import re
import sys
import time
from datetime import datetime

# Ajouter les chemins n√©cessaires
sys.path.insert(0, '/root/project-jobsearch/linkedin-search-')
sys.path.insert(0, '/root/project-jobsearch/linkedin-search-/src')

def extract_unique_keywords_from_file(consolidated_file_path):
    """
    Extrait tous les mots-cl√©s uniques du fichier consolid√©.
    """
    try:
        with open(consolidated_file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Extraire tous les mots-cl√©s avec une regex
        keyword_pattern = r'"keywords":\s*"([^"]*)"'
        matches = re.findall(keyword_pattern, content)
        
        # Cr√©er un set pour √©liminer les doublons et nettoyer
        keywords_set = set()
        for match in matches:
            if match.strip():  # Ignorer les cha√Ænes vides
                keywords_set.add(match.strip())
        
        # Convertir en liste tri√©e
        unique_keywords = sorted(list(keywords_set))
        
        return unique_keywords
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'extraction des mots-cl√©s: {e}")
        return []

def run_searches_with_unique_keywords():
    """
    Version compl√®te avec import dynamique et gestion d'erreurs robuste.
    """
    # Chemin du fichier consolid√©
    consolidated_file = "/root/project-jobsearch/linkedin-search-/search-system/exports/Exports/linkedin_job_searches_consolidated.json"
    
    if not os.path.exists(consolidated_file):
        print(f"‚ùå Fichier consolid√© non trouv√©: {consolidated_file}")
        return
    
    # Extraire les mots-cl√©s uniques
    unique_keywords = extract_unique_keywords_from_file(consolidated_file)
    
    if not unique_keywords:
        print("‚ùå Aucun mot-cl√© trouv√©.")
        return
    
    print(f"üîç MOTS-CL√âS UNIQUES EXTRAITS ({len(unique_keywords)} trouv√©s)")
    print("=" * 60)
    for i, keyword in enumerate(unique_keywords, 1):
        print(f"  {i:2d}. {keyword}")
    
    # Tenter l'import du client LinkedIn
    try:
        from src.mcp_linkedin.client import linkedin_job_search_advanced
        print(f"\n‚úÖ Module LinkedIn import√© avec succ√®s")
    except ImportError as e:
        print(f"\n‚ùå Erreur d'import LinkedIn: {e}")
        print("üìã SOLUTION: Voici le script pr√™t √† ex√©cuter avec les bons imports:")
        print_ready_to_run_script(unique_keywords)
        return
    
    # Param√®tres de recherche
    location = "Paris"
    time_filter = 604800  # 7 jours en secondes (derni√®re semaine)
    limit = 50
    job_types = ["F", "C", "T"]  # Full-time, Contract, Temporary
    
    print(f"\nüöÄ PARAM√àTRES DE RECHERCHE")
    print(f"=" * 40)
    print(f"üìç Localisation: {location}")
    print(f"‚è∞ Filtre temporel: Derni√®re semaine ({time_filter} secondes)")
    print(f"üìä Limite par recherche: {limit} jobs")
    print(f"üíº Types de contrat: Full-time, Contract, Temporary")
    print(f"üîÑ Nombre total de recherches: {len(unique_keywords)}")
    
    # Demander confirmation
    try:
        input("\n‚è∏Ô∏è  Appuyez sur Entr√©e pour commencer les recherches (ou Ctrl+C pour annuler)...")
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Op√©ration annul√©e par l'utilisateur")
        return
    
    # Statistiques
    total_searches = len(unique_keywords)
    successful_searches = 0
    failed_searches = 0
    start_time = datetime.now()
    
    for i, keywords in enumerate(unique_keywords, 1):
        print(f"\nüîÑ Recherche {i}/{total_searches}: '{keywords}'")
        print("-" * 60)
        
        try:
            result = linkedin_job_search_advanced(
                keywords=keywords,
                location=location,
                limit=limit,
                job_type=job_types,
                listed_at=time_filter,
                use_enhanced_location=True
            )
            
            print(f"‚úÖ Recherche '{keywords}' termin√©e avec succ√®s")
            successful_searches += 1
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la recherche '{keywords}': {e}")
            failed_searches += 1
        
        # Pause entre les recherches pour √©viter le rate limiting
        if i < total_searches:
            pause_duration = 8  # 8 secondes entre chaque recherche
            print(f"‚è≥ Pause de {pause_duration} secondes...")
            time.sleep(pause_duration)
    
    # Statistiques finales
    end_time = datetime.now()
    duration = end_time - start_time
    
    print(f"\nüéâ TOUTES LES RECHERCHES TERMIN√âES!")
    print(f"=" * 50)
    print(f"‚úÖ Recherches r√©ussies: {successful_searches}")
    print(f"‚ùå Recherches √©chou√©es: {failed_searches}")
    print(f"üìä Total: {total_searches}")
    print(f"‚è±Ô∏è  Dur√©e totale: {duration}")
    print(f"üìÑ Fichier consolid√© mis √† jour:")
    print(f"   {consolidated_file}")

def print_ready_to_run_script(unique_keywords):
    """
    G√©n√®re un script pr√™t √† ex√©cuter avec tous les mots-cl√©s.
    """
    script_content = f'''#!/usr/bin/env python3
"""
Script g√©n√©r√© automatiquement pour relancer toutes les recherches LinkedIn.
Contient {len(unique_keywords)} mots-cl√©s uniques extraits du fichier consolid√©.
Param√®tres: Paris, derni√®re semaine, 50 jobs par recherche, types Full-time/Contract/Temporary
"""

import sys
import time
from datetime import datetime

# Ajouter le chemin vers le module
sys.path.append('/root/project-jobsearch/linkedin-search-')

try:
    from src.mcp_linkedin.client import linkedin_job_search_advanced
    print("‚úÖ Module LinkedIn import√© avec succ√®s")
except ImportError as e:
    print(f"‚ùå Erreur d'import: {{e}}")
    print("üîß V√©rifiez que le module linkedin-api est install√©:")
    print("   pip install linkedin-api python-dotenv fastmcp")
    sys.exit(1)

def main():
    # Liste des mots-cl√©s uniques extraits
    unique_keywords = [
{chr(10).join([f'        "{keyword}",' for keyword in unique_keywords])}
    ]
    
    # Param√®tres de recherche
    location = "Paris"
    time_filter = 604800  # 7 jours (derni√®re semaine)
    limit = 50
    job_types = ["F", "C", "T"]  # Full-time, Contract, Temporary
    
    print(f"üöÄ LANCEMENT DES RECHERCHES LINKEDIN")
    print(f"=" * 50)
    print(f"üìç Localisation: {{location}}")
    print(f"‚è∞ Filtre: Derni√®re semaine")
    print(f"üìä Limite: {{limit}} jobs par recherche")
    print(f"üíº Types: Full-time, Contract, Temporary")
    print(f"üîÑ Total recherches: {{len(unique_keywords)}}")
    
    # Demander confirmation
    try:
        input("\\n‚è∏Ô∏è  Appuyez sur Entr√©e pour commencer...")
    except KeyboardInterrupt:
        print("\\n‚èπÔ∏è  Annul√©")
        return
    
    # Ex√©cuter les recherches
    successful = 0
    failed = 0
    start_time = datetime.now()
    
    for i, keywords in enumerate(unique_keywords, 1):
        print(f"\\nüîÑ {{i}}/{{len(unique_keywords)}}: '{{keywords}}'")
        
        try:
            result = linkedin_job_search_advanced(
                keywords=keywords,
                location=location,
                limit=limit,
                job_type=job_types,
                listed_at=time_filter,
                use_enhanced_location=True
            )
            print(f"‚úÖ Succ√®s")
            successful += 1
            
        except Exception as e:
            print(f"‚ùå Erreur: {{e}}")
            failed += 1
        
        # Pause pour √©viter rate limiting
        if i < len(unique_keywords):
            time.sleep(8)
    
    # R√©sultats finaux
    duration = datetime.now() - start_time
    print(f"\\nüéâ TERMIN√â!")
    print(f"‚úÖ Succ√®s: {{successful}}")
    print(f"‚ùå √âchecs: {{failed}}")
    print(f"‚è±Ô∏è  Dur√©e: {{duration}}")
    print(f"üìÅ Donn√©es consolid√©es automatiquement dans exports/Exports/")

if __name__ == "__main__":
    main()
'''

    # Sauvegarder le script
    script_path = "/root/project-jobsearch/linkedin-search-/search-system/scripts/generated_relaunch_script.py"
    with open(script_path, 'w', encoding='utf-8') as f:
        f.write(script_content)
    
    print(f"\nüìù SCRIPT G√âN√âR√â: {script_path}")
    print(f"üöÄ POUR EX√âCUTER:")
    print(f"   cd /root/project-jobsearch/linkedin-search-/search-system")
    print(f"   python scripts/generated_relaunch_script.py")
    
    return script_path

if __name__ == "__main__":
    print("üîç EXTRACTEUR ET RELANCEUR COMPLET - MOTS-CL√âS LINKEDIN")
    print("=" * 65)
    
    try:
        run_searches_with_unique_keywords()
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Op√©ration interrompue par l'utilisateur")
    except Exception as e:
        print(f"\nüí• Erreur inattendue: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)